"""
This file shows how to run the Pulse Streamer 8/2 without making use of the high-level Python-wrappers.
You will communicate with and access the device by making use the simple wrapper 
generated by the protobuf compiler.
For advanced application and convenient use, we recommend to have a look at the files
<2_SimplePulses.py> and <3_Tutorial.py> as well as the full documentation of the Pulse Streamer 8/2
https://www.swabianinstruments.com/static/documentation/PulseStreamer/index.html

Before you can run this example, you need to install "pulsestreamer" client package

  > pip install pulsestreamer

"""
import numpy as np
import sys

from grpc import insecure_channel

try:
    from pulsestreamer.grpc.pulse_streamer_pb2 import VoidMessage, PulseMessage, SequenceMessage, TriggerMessage, PulseStreamerStub
    from pulsestreamer.enums import TriggerRearm, TriggerStart  # enum definitions
except Exception as e:
    print('Exception: '+ str(e))
    print (
"""
Failed to import simple wrapper generated by the protobuf compiler (source: pulse_streamer.proto)
- Ensure pulse_streamer_pb2.py is in the search path.
Required packages: grpcio, protobuf
""")
    sys.exit(1)


def get_random_seq(min_len=0, max_len=1024, n_pulses=1000):
    """
    Generate a sequence of random sequence steps on the digital
    channels 1-7 and the two analog channels.
    Sequence steps are represented as tuples in the form (time, [1,3], analog0, analog1),
    where time is an integer in ns (clock ticks), [1,3] is a list numbering the channels
    which should be high the last two numbers specify the analog outputs in 16bit DAC-integer values.
    
    Digital channel 0 is used as a trigger.       
    """
    t = np.random.uniform(min_len, max_len, n_pulses).astype(int)
    seq = SequenceMessage()
    
    seq.pulse.extend([PulseMessage(ticks=8, digi=1, ao0=0,ao1=0)]) # 8 ns trigger pulse on channel 0
    for i, ti in enumerate(t):
        state = i%2
        p = PulseMessage(ticks=ti, digi=0xfe*state, ao0=0x7fff*state, ao1=-0x7fff*state)
        seq.pulse.extend([p])
    return seq

if __name__ == '__main__':
    #create Pulsestreamer
    """To set the IP-Address of the Pulsestreamer see
    https://www.swabianinstruments.com/static/documentation/PulseStreamer/sections/network.html
    """
    ip_hostname ='pulsestreamer' # edit this line to use a specific Pulse Streamer IP address

    channel = insecure_channel(ip_hostname+':50051')
    stub = PulseStreamerStub(channel)

    #reset Pulsestreamer
    stub.reset(VoidMessage(), 100)
    print('Reset Pulsestreamer')

    seq = get_random_seq(0, 1024, 10000)

    # example how to set some values
    seq.n_runs = -1
    seq.final.ticks = 0
    seq.final.digi = 0x00
    seq.final.ao0 = 0x7fff
    seq.final.ao1 = 0x7fff

    #set trigger mode
    t = TriggerMessage()
    t.start = TriggerStart.IMMEDIATE.value
    t.mode = TriggerRearm.MANUAL.value

    timeout = 200

    stub.setTrigger(t, timeout=timeout)
    print('Set Triggermode')

    stub.stream(seq, timeout=timeout)
    print('Load sequence')

    reply = stub.isStreaming(VoidMessage(), timeout=timeout)
    print('Pulsestreamer is streaming: '+str(reply.value))
